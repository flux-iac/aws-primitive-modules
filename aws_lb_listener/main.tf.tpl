######################################################################
# Generated by Tofu-Jet. Please do not manually edit.
# AWS Primitive Module for TF-controller
# Resource: aws_lb_listener
######################################################################

terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "4.38.0"
    }
  }
}

provider "aws" {
}

variable "values" {
  type = any object({
    alpn_policy = optional(string)
    certificate_arn = optional(string)
    default_action = optional(list({
        type = optional(string)
        authenticate_cognito = optional(list({
            authentication_request_extra_params = optional(map(string))
            on_unauthenticated_request = optional(string)
            scope = optional(string)
            session_cookie_name = optional(string)
            session_timeout = optional(number)
            user_pool_arn = optional(string)
            user_pool_client_id = optional(string)
            user_pool_domain = optional(string)
        }))
        authenticate_oidc = optional(list({
            issuer = optional(string)
            user_info_endpoint = optional(string)
            authentication_request_extra_params = optional(map(string))
            client_secret = optional(string)
            on_unauthenticated_request = optional(string)
            scope = optional(string)
            session_cookie_name = optional(string)
            session_timeout = optional(number)
            token_endpoint = optional(string)
            authorization_endpoint = optional(string)
            client_id = optional(string)
        }))
        fixed_response = optional(list({
            status_code = optional(string)
            content_type = optional(string)
            message_body = optional(string)
        }))
        forward = optional(list({
            target_group = optional(set(any))
            stickiness = optional(list({
                duration = optional(number)
                enabled = optional(bool)
            }))
        }))
        order = optional(number)
        redirect = optional(list({
            path = optional(string)
            port = optional(string)
            protocol = optional(string)
            query = optional(string)
            status_code = optional(string)
            host = optional(string)
        }))
        target_group_arn = optional(string)
    }))
    load_balancer_arn = optional(string)
    port = optional(number)
    tags = optional(map(string))
  })
}

resource "aws_lb_listener" "this" {

  {{- if $.Values.alpn_policy }}
  alpn_policy = var.values.alpn_policy
  {{- end }}
  {{- if $.Values.certificate_arn }}
  certificate_arn = var.values.certificate_arn
  {{- end }}
  {{- if $.Values.default_action }}
  default_action = var.values.default_action
  {{- end }}
  {{- if $.Values.load_balancer_arn }}
  load_balancer_arn = var.values.load_balancer_arn
  {{- end }}
  {{- if $.Values.port }}
  port = var.values.port
  {{- end }}
  {{- if $.Values.tags }}
  tags = var.values.tags
  {{- end }}


  {{- if $.Values.count }}
  count = {{ $.Values.count }}
  {{- end }}

  {{- if $.Values.lifecycle }}
  lifecycle {
    {{- if $.Values.lifecycle.create_before_destroy }}
    create_before_destroy = {{ $.Values.lifecycle.create_before_destroy }}
    {{- end }}
    {{- if $.Values.lifecycle.ignore_changes }}
    prevent_destroy = {{ $.Values.lifecycle.prevent_destroy }}
    {{- end }}
    {{- if $.Values.lifecycle.ignore_changes }}
    ignore_changes = {{ $.Values.lifecycle.ignore_changes }}
    {{- end }}
  }
  {{- end }}
}


output "arn" {
    value = aws_lb_listener.this.arn
}

output "certificate_arn" {
    value = aws_lb_listener.this.certificate_arn
}

output "load_balancer_arn" {
    value = aws_lb_listener.this.load_balancer_arn
}

output "protocol" {
    value = aws_lb_listener.this.protocol
}

output "ssl_policy" {
    value = aws_lb_listener.this.ssl_policy
}

