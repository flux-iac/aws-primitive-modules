######################################################################
# Generated by Tofu-Jet. Please do not manually edit.
# AWS Primitive Module for TF-controller
# Resource: aws_appflow_flow
######################################################################

terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "4.38.0"
    }
  }
}

provider "aws" {
}

variable "values" {
  type = object({
    description = optional(string)
    destination_flow_config = optional(set(object({
        connector_type = optional(string)
        destination_connector_properties = optional(list(object({
            marketo = optional(list(object({
                error_handling_config = optional(list(object({
                    bucket_name = optional(string)
                    bucket_prefix = optional(string)
                    fail_on_first_destination_error = optional(bool)
                })))
                object = optional(string)
            })))
            zendesk = optional(list(object({
                object = optional(string)
                write_operation_type = optional(string)
                error_handling_config = optional(list(object({
                    fail_on_first_destination_error = optional(bool)
                    bucket_name = optional(string)
                    bucket_prefix = optional(string)
                })))
                id_field_names = optional(list(string))
            })))
            custom_connector = optional(list(object({
                id_field_names = optional(list(string))
                write_operation_type = optional(string)
                custom_properties = optional(map(string))
                entity_name = optional(string)
                error_handling_config = optional(list(object({
                    bucket_name = optional(string)
                    bucket_prefix = optional(string)
                    fail_on_first_destination_error = optional(bool)
                })))
            })))
            event_bridge = optional(list(object({
                error_handling_config = optional(list(object({
                    bucket_prefix = optional(string)
                    fail_on_first_destination_error = optional(bool)
                    bucket_name = optional(string)
                })))
                object = optional(string)
            })))
            honeycode = optional(list(object({
                error_handling_config = optional(list(object({
                    bucket_name = optional(string)
                    bucket_prefix = optional(string)
                    fail_on_first_destination_error = optional(bool)
                })))
                object = optional(string)
            })))
            lookout_metrics = optional(list(object({
            })))
            redshift = optional(list(object({
                object = optional(string)
                bucket_prefix = optional(string)
                error_handling_config = optional(list(object({
                    bucket_name = optional(string)
                    bucket_prefix = optional(string)
                    fail_on_first_destination_error = optional(bool)
                })))
                intermediate_bucket_name = optional(string)
            })))
            s3 = optional(list(object({
                bucket_name = optional(string)
                bucket_prefix = optional(string)
                s3_output_format_config = optional(list(object({
                    aggregation_config = optional(list(object({
                        aggregation_type = optional(string)
                    })))
                    file_type = optional(string)
                    prefix_config = optional(list(object({
                        prefix_format = optional(string)
                        prefix_type = optional(string)
                    })))
                })))
            })))
            salesforce = optional(list(object({
                error_handling_config = optional(list(object({
                    bucket_name = optional(string)
                    bucket_prefix = optional(string)
                    fail_on_first_destination_error = optional(bool)
                })))
                id_field_names = optional(list(string))
                object = optional(string)
                write_operation_type = optional(string)
            })))
            sapo_data = optional(list(object({
                error_handling_config = optional(list(object({
                    bucket_name = optional(string)
                    bucket_prefix = optional(string)
                    fail_on_first_destination_error = optional(bool)
                })))
                id_field_names = optional(list(string))
                object_path = optional(string)
                success_response_handling_config = optional(list(object({
                    bucket_name = optional(string)
                    bucket_prefix = optional(string)
                })))
                write_operation_type = optional(string)
            })))
            customer_profiles = optional(list(object({
                object_type_name = optional(string)
                domain_name = optional(string)
            })))
            upsolver = optional(list(object({
                bucket_name = optional(string)
                bucket_prefix = optional(string)
                s3_output_format_config = optional(list(object({
                    aggregation_config = optional(list(object({
                        aggregation_type = optional(string)
                    })))
                    file_type = optional(string)
                    prefix_config = optional(list(object({
                        prefix_format = optional(string)
                        prefix_type = optional(string)
                    })))
                })))
            })))
            snowflake = optional(list(object({
                bucket_prefix = optional(string)
                error_handling_config = optional(list(object({
                    bucket_name = optional(string)
                    bucket_prefix = optional(string)
                    fail_on_first_destination_error = optional(bool)
                })))
                intermediate_bucket_name = optional(string)
                object = optional(string)
            })))
        })))
        api_version = optional(string)
        connector_profile_name = optional(string)
    })))
    kms_arn = optional(string)
    name = optional(string)
    source_flow_config = optional(list(object({
        incremental_pull_config = optional(list(object({
            datetime_type_field_name = optional(string)
        })))
        source_connector_properties = optional(list(object({
            amplitude = optional(list(object({
                object = optional(string)
            })))
            google_analytics = optional(list(object({
                object = optional(string)
            })))
            marketo = optional(list(object({
                object = optional(string)
            })))
            service_now = optional(list(object({
                object = optional(string)
            })))
            singular = optional(list(object({
                object = optional(string)
            })))
            zendesk = optional(list(object({
                object = optional(string)
            })))
            infor_nexus = optional(list(object({
                object = optional(string)
            })))
            sapo_data = optional(list(object({
                object = optional(string)
            })))
            trendmicro = optional(list(object({
                object = optional(string)
            })))
            datadog = optional(list(object({
                object = optional(string)
            })))
            dynatrace = optional(list(object({
                object = optional(string)
            })))
            s3 = optional(list(object({
                bucket_name = optional(string)
                bucket_prefix = optional(string)
                s3_input_format_config = optional(list(object({
                    s3_input_file_type = optional(string)
                })))
            })))
            veeva = optional(list(object({
                document_type = optional(string)
                include_all_versions = optional(bool)
                include_renditions = optional(bool)
                include_source_files = optional(bool)
                object = optional(string)
            })))
            custom_connector = optional(list(object({
                custom_properties = optional(map(string))
                entity_name = optional(string)
            })))
            salesforce = optional(list(object({
                include_deleted_records = optional(bool)
                object = optional(string)
                enable_dynamic_field_update = optional(bool)
            })))
            slack = optional(list(object({
                object = optional(string)
            })))
        })))
        api_version = optional(string)
        connector_profile_name = optional(string)
        connector_type = optional(string)
    })))
    tags = optional(map(string))
    task = optional(set(object({
        task_type = optional(string)
        connector_operator = optional(list(object({
            dynatrace = optional(string)
            google_analytics = optional(string)
            s3 = optional(string)
            service_now = optional(string)
            veeva = optional(string)
            zendesk = optional(string)
            datadog = optional(string)
            infor_nexus = optional(string)
            marketo = optional(string)
            slack = optional(string)
            amplitude = optional(string)
            custom_connector = optional(string)
            salesforce = optional(string)
            sapo_data = optional(string)
            singular = optional(string)
            trendmicro = optional(string)
        })))
        destination_field = optional(string)
        source_fields = optional(list(string))
        task_properties = optional(map(string))
    })))
    trigger_config = optional(list(object({
        trigger_properties = optional(list(object({
            scheduled = optional(list(object({
                schedule_offset = optional(number)
                schedule_start_time = optional(string)
                timezone = optional(string)
                data_pull_mode = optional(string)
                first_execution_from = optional(string)
                schedule_end_time = optional(string)
                schedule_expression = optional(string)
            })))
        })))
        trigger_type = optional(string)
    })))
  })
}

resource "aws_appflow_flow" "this" {

  {{- if $.Values.description }}
  description = var.values.description
  {{- end }}
  {{- if $.Values.destination_flow_config }}
  dynamic "destination_flow_config" {
    for_each = var.values.destination_flow_config[*]
    content {
      api_version = destination_flow_config.value.api_version
      connector_profile_name = destination_flow_config.value.connector_profile_name
      connector_type = destination_flow_config.value.connector_type
      dynamic "destination_connector_properties" {
        for_each = destination_flow_config.value.destination_connector_properties[*]
        content {
          dynamic "zendesk" {
            for_each = destination_connector_properties.value.zendesk[*]
            content {
              dynamic "error_handling_config" {
                for_each = zendesk.value.error_handling_config[*]
                content {
                  bucket_name = error_handling_config.value.bucket_name
                  bucket_prefix = error_handling_config.value.bucket_prefix
                  fail_on_first_destination_error = error_handling_config.value.fail_on_first_destination_error
                }
              }
              id_field_names = zendesk.value.id_field_names
              object = zendesk.value.object
              write_operation_type = zendesk.value.write_operation_type
            }
          }
          dynamic "custom_connector" {
            for_each = destination_connector_properties.value.custom_connector[*]
            content {
              custom_properties = custom_connector.value.custom_properties
              entity_name = custom_connector.value.entity_name
              dynamic "error_handling_config" {
                for_each = custom_connector.value.error_handling_config[*]
                content {
                  bucket_name = error_handling_config.value.bucket_name
                  bucket_prefix = error_handling_config.value.bucket_prefix
                  fail_on_first_destination_error = error_handling_config.value.fail_on_first_destination_error
                }
              }
              id_field_names = custom_connector.value.id_field_names
              write_operation_type = custom_connector.value.write_operation_type
            }
          }
          dynamic "marketo" {
            for_each = destination_connector_properties.value.marketo[*]
            content {
              dynamic "error_handling_config" {
                for_each = marketo.value.error_handling_config[*]
                content {
                  bucket_prefix = error_handling_config.value.bucket_prefix
                  fail_on_first_destination_error = error_handling_config.value.fail_on_first_destination_error
                  bucket_name = error_handling_config.value.bucket_name
                }
              }
              object = marketo.value.object
            }
          }
          dynamic "honeycode" {
            for_each = destination_connector_properties.value.honeycode[*]
            content {
              dynamic "error_handling_config" {
                for_each = honeycode.value.error_handling_config[*]
                content {
                  bucket_name = error_handling_config.value.bucket_name
                  bucket_prefix = error_handling_config.value.bucket_prefix
                  fail_on_first_destination_error = error_handling_config.value.fail_on_first_destination_error
                }
              }
              object = honeycode.value.object
            }
          }
          dynamic "lookout_metrics" {
            for_each = destination_connector_properties.value.lookout_metrics[*]
            content {
            }
          }
          dynamic "redshift" {
            for_each = destination_connector_properties.value.redshift[*]
            content {
              bucket_prefix = redshift.value.bucket_prefix
              dynamic "error_handling_config" {
                for_each = redshift.value.error_handling_config[*]
                content {
                  bucket_name = error_handling_config.value.bucket_name
                  bucket_prefix = error_handling_config.value.bucket_prefix
                  fail_on_first_destination_error = error_handling_config.value.fail_on_first_destination_error
                }
              }
              intermediate_bucket_name = redshift.value.intermediate_bucket_name
              object = redshift.value.object
            }
          }
          dynamic "s3" {
            for_each = destination_connector_properties.value.s3[*]
            content {
              bucket_name = s3.value.bucket_name
              bucket_prefix = s3.value.bucket_prefix
              dynamic "s3_output_format_config" {
                for_each = s3.value.s3_output_format_config[*]
                content {
                  dynamic "aggregation_config" {
                    for_each = s3_output_format_config.value.aggregation_config[*]
                    content {
                      aggregation_type = aggregation_config.value.aggregation_type
                    }
                  }
                  file_type = s3_output_format_config.value.file_type
                  dynamic "prefix_config" {
                    for_each = s3_output_format_config.value.prefix_config[*]
                    content {
                      prefix_format = prefix_config.value.prefix_format
                      prefix_type = prefix_config.value.prefix_type
                    }
                  }
                }
              }
            }
          }
          dynamic "salesforce" {
            for_each = destination_connector_properties.value.salesforce[*]
            content {
              id_field_names = salesforce.value.id_field_names
              object = salesforce.value.object
              write_operation_type = salesforce.value.write_operation_type
              dynamic "error_handling_config" {
                for_each = salesforce.value.error_handling_config[*]
                content {
                  bucket_name = error_handling_config.value.bucket_name
                  bucket_prefix = error_handling_config.value.bucket_prefix
                  fail_on_first_destination_error = error_handling_config.value.fail_on_first_destination_error
                }
              }
            }
          }
          dynamic "sapo_data" {
            for_each = destination_connector_properties.value.sapo_data[*]
            content {
              dynamic "error_handling_config" {
                for_each = sapo_data.value.error_handling_config[*]
                content {
                  bucket_name = error_handling_config.value.bucket_name
                  bucket_prefix = error_handling_config.value.bucket_prefix
                  fail_on_first_destination_error = error_handling_config.value.fail_on_first_destination_error
                }
              }
              id_field_names = sapo_data.value.id_field_names
              object_path = sapo_data.value.object_path
              dynamic "success_response_handling_config" {
                for_each = sapo_data.value.success_response_handling_config[*]
                content {
                  bucket_name = success_response_handling_config.value.bucket_name
                  bucket_prefix = success_response_handling_config.value.bucket_prefix
                }
              }
              write_operation_type = sapo_data.value.write_operation_type
            }
          }
          dynamic "customer_profiles" {
            for_each = destination_connector_properties.value.customer_profiles[*]
            content {
              domain_name = customer_profiles.value.domain_name
              object_type_name = customer_profiles.value.object_type_name
            }
          }
          dynamic "event_bridge" {
            for_each = destination_connector_properties.value.event_bridge[*]
            content {
              dynamic "error_handling_config" {
                for_each = event_bridge.value.error_handling_config[*]
                content {
                  bucket_name = error_handling_config.value.bucket_name
                  bucket_prefix = error_handling_config.value.bucket_prefix
                  fail_on_first_destination_error = error_handling_config.value.fail_on_first_destination_error
                }
              }
              object = event_bridge.value.object
            }
          }
          dynamic "snowflake" {
            for_each = destination_connector_properties.value.snowflake[*]
            content {
              dynamic "error_handling_config" {
                for_each = snowflake.value.error_handling_config[*]
                content {
                  bucket_name = error_handling_config.value.bucket_name
                  bucket_prefix = error_handling_config.value.bucket_prefix
                  fail_on_first_destination_error = error_handling_config.value.fail_on_first_destination_error
                }
              }
              intermediate_bucket_name = snowflake.value.intermediate_bucket_name
              object = snowflake.value.object
              bucket_prefix = snowflake.value.bucket_prefix
            }
          }
          dynamic "upsolver" {
            for_each = destination_connector_properties.value.upsolver[*]
            content {
              bucket_name = upsolver.value.bucket_name
              bucket_prefix = upsolver.value.bucket_prefix
              dynamic "s3_output_format_config" {
                for_each = upsolver.value.s3_output_format_config[*]
                content {
                  dynamic "aggregation_config" {
                    for_each = s3_output_format_config.value.aggregation_config[*]
                    content {
                      aggregation_type = aggregation_config.value.aggregation_type
                    }
                  }
                  file_type = s3_output_format_config.value.file_type
                  dynamic "prefix_config" {
                    for_each = s3_output_format_config.value.prefix_config[*]
                    content {
                      prefix_format = prefix_config.value.prefix_format
                      prefix_type = prefix_config.value.prefix_type
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  {{- end }}
  {{- if $.Values.kms_arn }}
  kms_arn = var.values.kms_arn
  {{- end }}
  {{- if $.Values.name }}
  name = var.values.name
  {{- end }}
  {{- if $.Values.source_flow_config }}
  dynamic "source_flow_config" {
    for_each = var.values.source_flow_config[*]
    content {
      api_version = source_flow_config.value.api_version
      connector_profile_name = source_flow_config.value.connector_profile_name
      connector_type = source_flow_config.value.connector_type
      dynamic "incremental_pull_config" {
        for_each = source_flow_config.value.incremental_pull_config[*]
        content {
          datetime_type_field_name = incremental_pull_config.value.datetime_type_field_name
        }
      }
      dynamic "source_connector_properties" {
        for_each = source_flow_config.value.source_connector_properties[*]
        content {
          dynamic "custom_connector" {
            for_each = source_connector_properties.value.custom_connector[*]
            content {
              custom_properties = custom_connector.value.custom_properties
              entity_name = custom_connector.value.entity_name
            }
          }
          dynamic "salesforce" {
            for_each = source_connector_properties.value.salesforce[*]
            content {
              enable_dynamic_field_update = salesforce.value.enable_dynamic_field_update
              include_deleted_records = salesforce.value.include_deleted_records
              object = salesforce.value.object
            }
          }
          dynamic "slack" {
            for_each = source_connector_properties.value.slack[*]
            content {
              object = slack.value.object
            }
          }
          dynamic "amplitude" {
            for_each = source_connector_properties.value.amplitude[*]
            content {
              object = amplitude.value.object
            }
          }
          dynamic "google_analytics" {
            for_each = source_connector_properties.value.google_analytics[*]
            content {
              object = google_analytics.value.object
            }
          }
          dynamic "marketo" {
            for_each = source_connector_properties.value.marketo[*]
            content {
              object = marketo.value.object
            }
          }
          dynamic "service_now" {
            for_each = source_connector_properties.value.service_now[*]
            content {
              object = service_now.value.object
            }
          }
          dynamic "singular" {
            for_each = source_connector_properties.value.singular[*]
            content {
              object = singular.value.object
            }
          }
          dynamic "zendesk" {
            for_each = source_connector_properties.value.zendesk[*]
            content {
              object = zendesk.value.object
            }
          }
          dynamic "infor_nexus" {
            for_each = source_connector_properties.value.infor_nexus[*]
            content {
              object = infor_nexus.value.object
            }
          }
          dynamic "sapo_data" {
            for_each = source_connector_properties.value.sapo_data[*]
            content {
              object = sapo_data.value.object
            }
          }
          dynamic "trendmicro" {
            for_each = source_connector_properties.value.trendmicro[*]
            content {
              object = trendmicro.value.object
            }
          }
          dynamic "datadog" {
            for_each = source_connector_properties.value.datadog[*]
            content {
              object = datadog.value.object
            }
          }
          dynamic "dynatrace" {
            for_each = source_connector_properties.value.dynatrace[*]
            content {
              object = dynatrace.value.object
            }
          }
          dynamic "s3" {
            for_each = source_connector_properties.value.s3[*]
            content {
              bucket_prefix = s3.value.bucket_prefix
              dynamic "s3_input_format_config" {
                for_each = s3.value.s3_input_format_config[*]
                content {
                  s3_input_file_type = s3_input_format_config.value.s3_input_file_type
                }
              }
              bucket_name = s3.value.bucket_name
            }
          }
          dynamic "veeva" {
            for_each = source_connector_properties.value.veeva[*]
            content {
              document_type = veeva.value.document_type
              include_all_versions = veeva.value.include_all_versions
              include_renditions = veeva.value.include_renditions
              include_source_files = veeva.value.include_source_files
              object = veeva.value.object
            }
          }
        }
      }
    }
  }
  {{- end }}
  {{- if $.Values.tags }}
  tags = var.values.tags
  {{- end }}
  {{- if $.Values.task }}
  dynamic "task" {
    for_each = var.values.task[*]
    content {
      destination_field = task.value.destination_field
      source_fields = task.value.source_fields
      task_properties = task.value.task_properties
      task_type = task.value.task_type
      dynamic "connector_operator" {
        for_each = task.value.connector_operator[*]
        content {
          dynatrace = connector_operator.value.dynatrace
          google_analytics = connector_operator.value.google_analytics
          s3 = connector_operator.value.s3
          service_now = connector_operator.value.service_now
          veeva = connector_operator.value.veeva
          zendesk = connector_operator.value.zendesk
          datadog = connector_operator.value.datadog
          infor_nexus = connector_operator.value.infor_nexus
          marketo = connector_operator.value.marketo
          slack = connector_operator.value.slack
          amplitude = connector_operator.value.amplitude
          custom_connector = connector_operator.value.custom_connector
          salesforce = connector_operator.value.salesforce
          sapo_data = connector_operator.value.sapo_data
          singular = connector_operator.value.singular
          trendmicro = connector_operator.value.trendmicro
        }
      }
    }
  }
  {{- end }}
  {{- if $.Values.trigger_config }}
  dynamic "trigger_config" {
    for_each = var.values.trigger_config[*]
    content {
      dynamic "trigger_properties" {
        for_each = trigger_config.value.trigger_properties[*]
        content {
          dynamic "scheduled" {
            for_each = trigger_properties.value.scheduled[*]
            content {
              schedule_start_time = scheduled.value.schedule_start_time
              timezone = scheduled.value.timezone
              data_pull_mode = scheduled.value.data_pull_mode
              first_execution_from = scheduled.value.first_execution_from
              schedule_end_time = scheduled.value.schedule_end_time
              schedule_expression = scheduled.value.schedule_expression
              schedule_offset = scheduled.value.schedule_offset
            }
          }
        }
      }
      trigger_type = trigger_config.value.trigger_type
    }
  }
  {{- end }}


  {{- if $.Values.count }}
  count = {{ $.Values.count }}
  {{- end }}

  {{- if $.Values.lifecycle }}
  lifecycle {
    {{- if $.Values.lifecycle.create_before_destroy }}
    create_before_destroy = {{ $.Values.lifecycle.create_before_destroy }}
    {{- end }}
    {{- if $.Values.lifecycle.ignore_changes }}
    prevent_destroy = {{ $.Values.lifecycle.prevent_destroy }}
    {{- end }}
    {{- if $.Values.lifecycle.ignore_changes }}
    ignore_changes = {{ $.Values.lifecycle.ignore_changes }}
    {{- end }}
  }
  {{- end }}
}


output "arn" {
    value = aws_appflow_flow.this.arn
}

output "kms_arn" {
    value = aws_appflow_flow.this.kms_arn
}

