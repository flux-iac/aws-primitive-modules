######################################################################
# Generated by Tofu-Jet. Please do not manually edit.
# AWS Primitive Module for TF-controller
# Resource: aws_appflow_flow
######################################################################

terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "4.38.0"
    }
  }
}

provider "aws" {
}

variable "values" {
  type = object({
    description = optional(string)
    destination_flow_config = optional(set(object({
        connector_type = optional(string)
        destination_connector_properties = optional(list(object({
            snowflake = optional(list(object({
                bucket_prefix = optional(string)
                error_handling_config = optional(list(object({
                    bucket_name = optional(string)
                    bucket_prefix = optional(string)
                    fail_on_first_destination_error = optional(bool)
                })))
                intermediate_bucket_name = optional(string)
                object = optional(string)
            })))
            zendesk = optional(list(object({
                error_handling_config = optional(list(object({
                    bucket_name = optional(string)
                    bucket_prefix = optional(string)
                    fail_on_first_destination_error = optional(bool)
                })))
                id_field_names = optional(list(string))
                object = optional(string)
                write_operation_type = optional(string)
            })))
            event_bridge = optional(list(object({
                error_handling_config = optional(list(object({
                    fail_on_first_destination_error = optional(bool)
                    bucket_name = optional(string)
                    bucket_prefix = optional(string)
                })))
                object = optional(string)
            })))
            lookout_metrics = optional(list(object({
            })))
            redshift = optional(list(object({
                bucket_prefix = optional(string)
                error_handling_config = optional(list(object({
                    bucket_name = optional(string)
                    bucket_prefix = optional(string)
                    fail_on_first_destination_error = optional(bool)
                })))
                intermediate_bucket_name = optional(string)
                object = optional(string)
            })))
            s3 = optional(list(object({
                bucket_name = optional(string)
                bucket_prefix = optional(string)
                s3_output_format_config = optional(list(object({
                    aggregation_config = optional(list(object({
                        aggregation_type = optional(string)
                    })))
                    file_type = optional(string)
                    prefix_config = optional(list(object({
                        prefix_format = optional(string)
                        prefix_type = optional(string)
                    })))
                })))
            })))
            salesforce = optional(list(object({
                write_operation_type = optional(string)
                error_handling_config = optional(list(object({
                    bucket_prefix = optional(string)
                    fail_on_first_destination_error = optional(bool)
                    bucket_name = optional(string)
                })))
                id_field_names = optional(list(string))
                object = optional(string)
            })))
            sapo_data = optional(list(object({
                error_handling_config = optional(list(object({
                    bucket_name = optional(string)
                    bucket_prefix = optional(string)
                    fail_on_first_destination_error = optional(bool)
                })))
                id_field_names = optional(list(string))
                object_path = optional(string)
                success_response_handling_config = optional(list(object({
                    bucket_name = optional(string)
                    bucket_prefix = optional(string)
                })))
                write_operation_type = optional(string)
            })))
            custom_connector = optional(list(object({
                custom_properties = optional(map(string))
                entity_name = optional(string)
                error_handling_config = optional(list(object({
                    bucket_prefix = optional(string)
                    fail_on_first_destination_error = optional(bool)
                    bucket_name = optional(string)
                })))
                id_field_names = optional(list(string))
                write_operation_type = optional(string)
            })))
            customer_profiles = optional(list(object({
                domain_name = optional(string)
                object_type_name = optional(string)
            })))
            honeycode = optional(list(object({
                error_handling_config = optional(list(object({
                    bucket_prefix = optional(string)
                    fail_on_first_destination_error = optional(bool)
                    bucket_name = optional(string)
                })))
                object = optional(string)
            })))
            marketo = optional(list(object({
                error_handling_config = optional(list(object({
                    bucket_name = optional(string)
                    bucket_prefix = optional(string)
                    fail_on_first_destination_error = optional(bool)
                })))
                object = optional(string)
            })))
            upsolver = optional(list(object({
                bucket_name = optional(string)
                bucket_prefix = optional(string)
                s3_output_format_config = optional(list(object({
                    aggregation_config = optional(list(object({
                        aggregation_type = optional(string)
                    })))
                    file_type = optional(string)
                    prefix_config = optional(list(object({
                        prefix_format = optional(string)
                        prefix_type = optional(string)
                    })))
                })))
            })))
        })))
        api_version = optional(string)
        connector_profile_name = optional(string)
    })))
    kms_arn = optional(string)
    name = optional(string)
    source_flow_config = optional(list(object({
        api_version = optional(string)
        connector_profile_name = optional(string)
        connector_type = optional(string)
        incremental_pull_config = optional(list(object({
            datetime_type_field_name = optional(string)
        })))
        source_connector_properties = optional(list(object({
            dynatrace = optional(list(object({
                object = optional(string)
            })))
            amplitude = optional(list(object({
                object = optional(string)
            })))
            google_analytics = optional(list(object({
                object = optional(string)
            })))
            marketo = optional(list(object({
                object = optional(string)
            })))
            sapo_data = optional(list(object({
                object = optional(string)
            })))
            veeva = optional(list(object({
                include_source_files = optional(bool)
                object = optional(string)
                document_type = optional(string)
                include_all_versions = optional(bool)
                include_renditions = optional(bool)
            })))
            datadog = optional(list(object({
                object = optional(string)
            })))
            infor_nexus = optional(list(object({
                object = optional(string)
            })))
            salesforce = optional(list(object({
                enable_dynamic_field_update = optional(bool)
                include_deleted_records = optional(bool)
                object = optional(string)
            })))
            service_now = optional(list(object({
                object = optional(string)
            })))
            singular = optional(list(object({
                object = optional(string)
            })))
            custom_connector = optional(list(object({
                custom_properties = optional(map(string))
                entity_name = optional(string)
            })))
            s3 = optional(list(object({
                bucket_name = optional(string)
                bucket_prefix = optional(string)
                s3_input_format_config = optional(list(object({
                    s3_input_file_type = optional(string)
                })))
            })))
            slack = optional(list(object({
                object = optional(string)
            })))
            trendmicro = optional(list(object({
                object = optional(string)
            })))
            zendesk = optional(list(object({
                object = optional(string)
            })))
        })))
    })))
    tags = optional(map(string))
    task = optional(set(object({
        connector_operator = optional(list(object({
            amplitude = optional(string)
            s3 = optional(string)
            salesforce = optional(string)
            slack = optional(string)
            veeva = optional(string)
            dynatrace = optional(string)
            sapo_data = optional(string)
            service_now = optional(string)
            singular = optional(string)
            zendesk = optional(string)
            custom_connector = optional(string)
            datadog = optional(string)
            google_analytics = optional(string)
            infor_nexus = optional(string)
            marketo = optional(string)
            trendmicro = optional(string)
        })))
        destination_field = optional(string)
        source_fields = optional(list(string))
        task_properties = optional(map(string))
        task_type = optional(string)
    })))
    trigger_config = optional(list(object({
        trigger_properties = optional(list(object({
            scheduled = optional(list(object({
                schedule_expression = optional(string)
                schedule_offset = optional(number)
                schedule_start_time = optional(string)
                timezone = optional(string)
                data_pull_mode = optional(string)
                first_execution_from = optional(string)
                schedule_end_time = optional(string)
            })))
        })))
        trigger_type = optional(string)
    })))
  })
}

resource "aws_appflow_flow" "this" {

  {{- if $.Values.description }}
  description = var.values.description
  {{- end }}
  {{- if $.Values.destination_flow_config }}
  dynamic "destination_flow_config" {
    for_each = var.values.destination_flow_config[*]
    content {
      api_version = destination_flow_config.value.api_version
      connector_profile_name = destination_flow_config.value.connector_profile_name
      connector_type = destination_flow_config.value.connector_type
      destination_connector_properties = destination_flow_config.value.destination_connector_properties
    }
  }
  {{- end }}
  {{- if $.Values.kms_arn }}
  kms_arn = var.values.kms_arn
  {{- end }}
  {{- if $.Values.name }}
  name = var.values.name
  {{- end }}
  {{- if $.Values.source_flow_config }}
  source_flow_config = var.values.source_flow_config
  {{- end }}
  {{- if $.Values.tags }}
  tags = var.values.tags
  {{- end }}
  {{- if $.Values.task }}
  dynamic "task" {
    for_each = var.values.task[*]
    content {
      task_properties = task.value.task_properties
      task_type = task.value.task_type
      connector_operator = task.value.connector_operator
      destination_field = task.value.destination_field
      source_fields = task.value.source_fields
    }
  }
  {{- end }}
  {{- if $.Values.trigger_config }}
  trigger_config = var.values.trigger_config
  {{- end }}


  {{- if $.Values.count }}
  count = {{ $.Values.count }}
  {{- end }}

  {{- if $.Values.lifecycle }}
  lifecycle {
    {{- if $.Values.lifecycle.create_before_destroy }}
    create_before_destroy = {{ $.Values.lifecycle.create_before_destroy }}
    {{- end }}
    {{- if $.Values.lifecycle.ignore_changes }}
    prevent_destroy = {{ $.Values.lifecycle.prevent_destroy }}
    {{- end }}
    {{- if $.Values.lifecycle.ignore_changes }}
    ignore_changes = {{ $.Values.lifecycle.ignore_changes }}
    {{- end }}
  }
  {{- end }}
}


output "arn" {
    value = aws_appflow_flow.this.arn
}

output "kms_arn" {
    value = aws_appflow_flow.this.kms_arn
}

