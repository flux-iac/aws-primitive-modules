######################################################################
# Generated by Tofu-Jet. Please do not manually edit.
# AWS Primitive Module for TF-controller
# Resource: aws_ec2_fleet
######################################################################

terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "4.38.0"
    }
  }
}

variable "values" {
  type = object({
    context = optional(string)
    excess_capacity_termination_policy = optional(string)
    launch_template_config = optional(list(object({
        launch_template_specification = optional(list(object({
            launch_template_id = optional(string)
            launch_template_name = optional(string)
            version = optional(string)
        })))
        override = optional(list(object({
            instance_requirements = optional(list(object({
                accelerator_count = optional(list(object({
                    max = optional(number)
                    min = optional(number)
                })))
                memory_gib_per_vcpu = optional(list(object({
                    max = optional(number)
                    min = optional(number)
                })))
                on_demand_max_price_percentage_over_lowest_price = optional(number)
                total_local_storage_gb = optional(list(object({
                    max = optional(number)
                    min = optional(number)
                })))
                local_storage = optional(string)
                local_storage_types = optional(set(string))
                network_interface_count = optional(list(object({
                    min = optional(number)
                    max = optional(number)
                })))
                spot_max_price_percentage_over_lowest_price = optional(number)
                accelerator_manufacturers = optional(set(string))
                accelerator_names = optional(set(string))
                bare_metal = optional(string)
                burstable_performance = optional(string)
                vcpu_count = optional(list(object({
                    max = optional(number)
                    min = optional(number)
                })))
                accelerator_total_memory_mib = optional(list(object({
                    max = optional(number)
                    min = optional(number)
                })))
                accelerator_types = optional(set(string))
                baseline_ebs_bandwidth_mbps = optional(list(object({
                    max = optional(number)
                    min = optional(number)
                })))
                instance_generations = optional(set(string))
                cpu_manufacturers = optional(set(string))
                excluded_instance_types = optional(set(string))
                memory_mib = optional(list(object({
                    max = optional(number)
                    min = optional(number)
                })))
                require_hibernate_support = optional(bool)
            })))
            instance_type = optional(string)
            max_price = optional(string)
            priority = optional(number)
            subnet_id = optional(string)
            weighted_capacity = optional(number)
            availability_zone = optional(string)
        })))
    })))
    on_demand_options = optional(list(object({
        allocation_strategy = optional(string)
    })))
    replace_unhealthy_instances = optional(bool)
    spot_options = optional(list(object({
        allocation_strategy = optional(string)
        instance_interruption_behavior = optional(string)
        instance_pools_to_use_count = optional(number)
        maintenance_strategies = optional(list(object({
            capacity_rebalance = optional(list(object({
                replacement_strategy = optional(string)
            })))
        })))
    })))
    tags = optional(map(string))
    target_capacity_specification = optional(list(object({
        total_target_capacity = optional(number)
        default_target_capacity_type = optional(string)
        on_demand_target_capacity = optional(number)
        spot_target_capacity = optional(number)
        target_capacity_unit_type = optional(string)
    })))
    terminate_instances = optional(bool)
    terminate_instances_with_expiration = optional(bool)
    type = optional(string)
  })
}

resource "aws_ec2_fleet" "this" {

  {{- if $.Values.context }}
  context = var.values.context
  {{- end }}
  {{- if $.Values.excess_capacity_termination_policy }}
  excess_capacity_termination_policy = var.values.excess_capacity_termination_policy
  {{- end }}
  {{- if $.Values.launch_template_config }}
  dynamic "launch_template_config" {
    for_each = var.values.launch_template_config[*]
    content {
      dynamic "launch_template_specification" {
        for_each = launch_template_config.value.launch_template_specification[*]
        content {
          launch_template_id = launch_template_specification.value.launch_template_id
          launch_template_name = launch_template_specification.value.launch_template_name
          version = launch_template_specification.value.version
        }
      }
      dynamic "override" {
        for_each = launch_template_config.value.override[*]
        content {
          availability_zone = override.value.availability_zone
          dynamic "instance_requirements" {
            for_each = override.value.instance_requirements[*]
            content {
              accelerator_manufacturers = instance_requirements.value.accelerator_manufacturers
              accelerator_names = instance_requirements.value.accelerator_names
              bare_metal = instance_requirements.value.bare_metal
              burstable_performance = instance_requirements.value.burstable_performance
              local_storage = instance_requirements.value.local_storage
              local_storage_types = instance_requirements.value.local_storage_types
              dynamic "network_interface_count" {
                for_each = instance_requirements.value.network_interface_count[*]
                content {
                  max = network_interface_count.value.max
                  min = network_interface_count.value.min
                }
              }
              spot_max_price_percentage_over_lowest_price = instance_requirements.value.spot_max_price_percentage_over_lowest_price
              dynamic "accelerator_total_memory_mib" {
                for_each = instance_requirements.value.accelerator_total_memory_mib[*]
                content {
                  max = accelerator_total_memory_mib.value.max
                  min = accelerator_total_memory_mib.value.min
                }
              }
              accelerator_types = instance_requirements.value.accelerator_types
              dynamic "baseline_ebs_bandwidth_mbps" {
                for_each = instance_requirements.value.baseline_ebs_bandwidth_mbps[*]
                content {
                  max = baseline_ebs_bandwidth_mbps.value.max
                  min = baseline_ebs_bandwidth_mbps.value.min
                }
              }
              instance_generations = instance_requirements.value.instance_generations
              dynamic "vcpu_count" {
                for_each = instance_requirements.value.vcpu_count[*]
                content {
                  min = vcpu_count.value.min
                  max = vcpu_count.value.max
                }
              }
              cpu_manufacturers = instance_requirements.value.cpu_manufacturers
              excluded_instance_types = instance_requirements.value.excluded_instance_types
              dynamic "memory_mib" {
                for_each = instance_requirements.value.memory_mib[*]
                content {
                  max = memory_mib.value.max
                  min = memory_mib.value.min
                }
              }
              require_hibernate_support = instance_requirements.value.require_hibernate_support
              dynamic "accelerator_count" {
                for_each = instance_requirements.value.accelerator_count[*]
                content {
                  max = accelerator_count.value.max
                  min = accelerator_count.value.min
                }
              }
              dynamic "memory_gib_per_vcpu" {
                for_each = instance_requirements.value.memory_gib_per_vcpu[*]
                content {
                  max = memory_gib_per_vcpu.value.max
                  min = memory_gib_per_vcpu.value.min
                }
              }
              on_demand_max_price_percentage_over_lowest_price = instance_requirements.value.on_demand_max_price_percentage_over_lowest_price
              dynamic "total_local_storage_gb" {
                for_each = instance_requirements.value.total_local_storage_gb[*]
                content {
                  max = total_local_storage_gb.value.max
                  min = total_local_storage_gb.value.min
                }
              }
            }
          }
          instance_type = override.value.instance_type
          max_price = override.value.max_price
          priority = override.value.priority
          subnet_id = override.value.subnet_id
          weighted_capacity = override.value.weighted_capacity
        }
      }
    }
  }
  {{- end }}
  {{- if $.Values.on_demand_options }}
  dynamic "on_demand_options" {
    for_each = var.values.on_demand_options[*]
    content {
      allocation_strategy = on_demand_options.value.allocation_strategy
    }
  }
  {{- end }}
  {{- if $.Values.replace_unhealthy_instances }}
  replace_unhealthy_instances = var.values.replace_unhealthy_instances
  {{- end }}
  {{- if $.Values.spot_options }}
  dynamic "spot_options" {
    for_each = var.values.spot_options[*]
    content {
      allocation_strategy = spot_options.value.allocation_strategy
      instance_interruption_behavior = spot_options.value.instance_interruption_behavior
      instance_pools_to_use_count = spot_options.value.instance_pools_to_use_count
      dynamic "maintenance_strategies" {
        for_each = spot_options.value.maintenance_strategies[*]
        content {
          dynamic "capacity_rebalance" {
            for_each = maintenance_strategies.value.capacity_rebalance[*]
            content {
              replacement_strategy = capacity_rebalance.value.replacement_strategy
            }
          }
        }
      }
    }
  }
  {{- end }}
  {{- if $.Values.tags }}
  tags = var.values.tags
  {{- end }}
  {{- if $.Values.target_capacity_specification }}
  dynamic "target_capacity_specification" {
    for_each = var.values.target_capacity_specification[*]
    content {
      default_target_capacity_type = target_capacity_specification.value.default_target_capacity_type
      on_demand_target_capacity = target_capacity_specification.value.on_demand_target_capacity
      spot_target_capacity = target_capacity_specification.value.spot_target_capacity
      target_capacity_unit_type = target_capacity_specification.value.target_capacity_unit_type
      total_target_capacity = target_capacity_specification.value.total_target_capacity
    }
  }
  {{- end }}
  {{- if $.Values.terminate_instances }}
  terminate_instances = var.values.terminate_instances
  {{- end }}
  {{- if $.Values.terminate_instances_with_expiration }}
  terminate_instances_with_expiration = var.values.terminate_instances_with_expiration
  {{- end }}
  {{- if $.Values.type }}
  type = var.values.type
  {{- end }}


  {{- if $.Values.count }}
  count = {{ $.Values.count }}
  {{- end }}

  {{- if $.Values.lifecycle }}
  lifecycle {
    {{- if $.Values.lifecycle.create_before_destroy }}
    create_before_destroy = {{ $.Values.lifecycle.create_before_destroy }}
    {{- end }}
    {{- if $.Values.lifecycle.ignore_changes }}
    prevent_destroy = {{ $.Values.lifecycle.prevent_destroy }}
    {{- end }}
    {{- if $.Values.lifecycle.ignore_changes }}
    ignore_changes = {{ $.Values.lifecycle.ignore_changes }}
    {{- end }}
  }
  {{- end }}
}


output "arn" {
    value = aws_ec2_fleet.this.arn
}

