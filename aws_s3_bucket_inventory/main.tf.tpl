######################################################################
# Generated by Tofu-Jet. Please do not manually edit.
# AWS Primitive Module for TF-controller
# Resource: aws_s3_bucket_inventory
######################################################################

terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "4.38.0"
    }
  }
}

provider "aws" {
}

variable "values" {
  type = object({
    bucket = optional(string)
    destination = optional(list(object({
        bucket = optional(list(object({
            format = optional(string)
            bucket_arn = optional(string)
            account_id = optional(string)
            prefix = optional(string)
            encryption = optional(list(object({
                sse_kms = optional(list(object({
                    key_id = optional(string)
                })))
                sse_s3 = optional(list(object({
                })))
            })))
        })))
    })))
    enabled = optional(bool)
    filter = optional(list(object({
        prefix = optional(string)
    })))
    included_object_versions = optional(string)
    name = optional(string)
    optional_fields = optional(set(string))
    schedule = optional(list(object({
        frequency = optional(string)
    })))
  })
}

resource "aws_s3_bucket_inventory" "this" {

  {{- if $.Values.bucket }}
  bucket = var.values.bucket
  {{- end }}
  {{- if $.Values.destination }}
  dynamic "destination" {
    for_each = var.values.destination[*]
    content {
      dynamic "bucket" {
        for_each = destination.value.bucket[*]
        content {
          bucket_arn = bucket.value.bucket_arn
          account_id = bucket.value.account_id
          prefix = bucket.value.prefix
          dynamic "encryption" {
            for_each = bucket.value.encryption[*]
            content {
              dynamic "sse_kms" {
                for_each = encryption.value.sse_kms[*]
                content {
                  key_id = sse_kms.value.key_id
                }
              }
              dynamic "sse_s3" {
                for_each = encryption.value.sse_s3[*]
                content {
                }
              }
            }
          }
          format = bucket.value.format
        }
      }
    }
  }
  {{- end }}
  {{- if $.Values.enabled }}
  enabled = var.values.enabled
  {{- end }}
  {{- if $.Values.filter }}
  dynamic "filter" {
    for_each = var.values.filter[*]
    content {
      prefix = filter.value.prefix
    }
  }
  {{- end }}
  {{- if $.Values.included_object_versions }}
  included_object_versions = var.values.included_object_versions
  {{- end }}
  {{- if $.Values.name }}
  name = var.values.name
  {{- end }}
  {{- if $.Values.optional_fields }}
  optional_fields = var.values.optional_fields
  {{- end }}
  {{- if $.Values.schedule }}
  dynamic "schedule" {
    for_each = var.values.schedule[*]
    content {
      frequency = schedule.value.frequency
    }
  }
  {{- end }}


  {{- if $.Values.count }}
  count = {{ $.Values.count }}
  {{- end }}

  {{- if $.Values.lifecycle }}
  lifecycle {
    {{- if $.Values.lifecycle.create_before_destroy }}
    create_before_destroy = {{ $.Values.lifecycle.create_before_destroy }}
    {{- end }}
    {{- if $.Values.lifecycle.ignore_changes }}
    prevent_destroy = {{ $.Values.lifecycle.prevent_destroy }}
    {{- end }}
    {{- if $.Values.lifecycle.ignore_changes }}
    ignore_changes = {{ $.Values.lifecycle.ignore_changes }}
    {{- end }}
  }
  {{- end }}
}


