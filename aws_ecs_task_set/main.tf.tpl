######################################################################
# Generated by Tofu-Jet. Please do not manually edit.
# AWS Primitive Module for TF-controller
# Resource: aws_ecs_task_set
######################################################################

terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "4.38.0"
    }
  }
}

provider "aws" {
}

variable "values" {
  type = object({
    capacity_provider_strategy = optional(set(object({
        base = optional(number)
        capacity_provider = optional(string)
        weight = optional(number)
    })))
    cluster = optional(string)
    external_id = optional(string)
    force_delete = optional(bool)
    launch_type = optional(string)
    load_balancer = optional(set(object({
        load_balancer_name = optional(string)
        target_group_arn = optional(string)
        container_name = optional(string)
        container_port = optional(number)
    })))
    network_configuration = optional(list(object({
        security_groups = optional(set(string))
        subnets = optional(set(string))
        assign_public_ip = optional(bool)
    })))
    platform_version = optional(string)
    service = optional(string)
    service_registries = optional(list(object({
        container_name = optional(string)
        container_port = optional(number)
        port = optional(number)
        registry_arn = optional(string)
    })))
    tags = optional(map(string))
    task_definition = optional(string)
    wait_until_stable = optional(bool)
    wait_until_stable_timeout = optional(string)
  })
}

resource "aws_ecs_task_set" "this" {

  {{- if $.Values.capacity_provider_strategy }}
  dynamic "capacity_provider_strategy" {
    for_each = var.values.capacity_provider_strategy[*]
    content {
      base = capacity_provider_strategy.value.base
      capacity_provider = capacity_provider_strategy.value.capacity_provider
      weight = capacity_provider_strategy.value.weight
    }
  }
  {{- end }}
  {{- if $.Values.cluster }}
  cluster = var.values.cluster
  {{- end }}
  {{- if $.Values.external_id }}
  external_id = var.values.external_id
  {{- end }}
  {{- if $.Values.force_delete }}
  force_delete = var.values.force_delete
  {{- end }}
  {{- if $.Values.launch_type }}
  launch_type = var.values.launch_type
  {{- end }}
  {{- if $.Values.load_balancer }}
  dynamic "load_balancer" {
    for_each = var.values.load_balancer[*]
    content {
      load_balancer_name = load_balancer.value.load_balancer_name
      target_group_arn = load_balancer.value.target_group_arn
      container_name = load_balancer.value.container_name
      container_port = load_balancer.value.container_port
    }
  }
  {{- end }}
  {{- if $.Values.network_configuration }}
  dynamic "network_configuration" {
    for_each = var.values.network_configuration[*]
    content {
      security_groups = network_configuration.value.security_groups
      subnets = network_configuration.value.subnets
      assign_public_ip = network_configuration.value.assign_public_ip
    }
  }
  {{- end }}
  {{- if $.Values.platform_version }}
  platform_version = var.values.platform_version
  {{- end }}
  {{- if $.Values.service }}
  service = var.values.service
  {{- end }}
  {{- if $.Values.service_registries }}
  dynamic "service_registries" {
    for_each = var.values.service_registries[*]
    content {
      container_port = service_registries.value.container_port
      port = service_registries.value.port
      registry_arn = service_registries.value.registry_arn
      container_name = service_registries.value.container_name
    }
  }
  {{- end }}
  {{- if $.Values.tags }}
  tags = var.values.tags
  {{- end }}
  {{- if $.Values.task_definition }}
  task_definition = var.values.task_definition
  {{- end }}
  {{- if $.Values.wait_until_stable }}
  wait_until_stable = var.values.wait_until_stable
  {{- end }}
  {{- if $.Values.wait_until_stable_timeout }}
  wait_until_stable_timeout = var.values.wait_until_stable_timeout
  {{- end }}


  {{- if $.Values.count }}
  count = {{ $.Values.count }}
  {{- end }}

  {{- if $.Values.lifecycle }}
  lifecycle {
    {{- if $.Values.lifecycle.create_before_destroy }}
    create_before_destroy = {{ $.Values.lifecycle.create_before_destroy }}
    {{- end }}
    {{- if $.Values.lifecycle.ignore_changes }}
    prevent_destroy = {{ $.Values.lifecycle.prevent_destroy }}
    {{- end }}
    {{- if $.Values.lifecycle.ignore_changes }}
    ignore_changes = {{ $.Values.lifecycle.ignore_changes }}
    {{- end }}
  }
  {{- end }}
}


output "arn" {
    value = aws_ecs_task_set.this.arn
}

output "external_id" {
    value = aws_ecs_task_set.this.external_id
}

output "launch_type" {
    value = aws_ecs_task_set.this.launch_type
}

output "platform_version" {
    value = aws_ecs_task_set.this.platform_version
}

output "stability_status" {
    value = aws_ecs_task_set.this.stability_status
}

output "status" {
    value = aws_ecs_task_set.this.status
}

output "task_set_id" {
    value = aws_ecs_task_set.this.task_set_id
}

