######################################################################
# Generated by Tofu-Jet. Please do not manually edit.
# AWS Primitive Module for TF-controller
# Resource: aws_ecs_task_definition
######################################################################

terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "4.38.0"
    }
  }
}

provider "aws" {
}

variable "values" {
  type = object({
    container_definitions = optional(string)
    cpu = optional(string)
    ephemeral_storage = optional(list(object({
        size_in_gib = optional(number)
    })))
    execution_role_arn = optional(string)
    family = optional(string)
    inference_accelerator = optional(set(object({
        device_name = optional(string)
        device_type = optional(string)
    })))
    ipc_mode = optional(string)
    memory = optional(string)
    network_mode = optional(string)
    pid_mode = optional(string)
    placement_constraints = optional(set(object({
        expression = optional(string)
        type = optional(string)
    })))
    proxy_configuration = optional(list(object({
        container_name = optional(string)
        properties = optional(map(string))
        type = optional(string)
    })))
    requires_compatibilities = optional(set(string))
    runtime_platform = optional(list(object({
        cpu_architecture = optional(string)
        operating_system_family = optional(string)
    })))
    skip_destroy = optional(bool)
    tags = optional(map(string))
    task_role_arn = optional(string)
    volume = optional(set(object({
        docker_volume_configuration = optional(list(object({
            driver = optional(string)
            driver_opts = optional(map(string))
            labels = optional(map(string))
            scope = optional(string)
            autoprovision = optional(bool)
        })))
        efs_volume_configuration = optional(list(object({
            file_system_id = optional(string)
            root_directory = optional(string)
            transit_encryption = optional(string)
            transit_encryption_port = optional(number)
            authorization_config = optional(list(object({
                access_point_id = optional(string)
                iam = optional(string)
            })))
        })))
        fsx_windows_file_server_volume_configuration = optional(list(object({
            root_directory = optional(string)
            authorization_config = optional(list(object({
                credentials_parameter = optional(string)
                domain = optional(string)
            })))
            file_system_id = optional(string)
        })))
        host_path = optional(string)
        name = optional(string)
    })))
  })
}

resource "aws_ecs_task_definition" "this" {

  {{- if $.Values.container_definitions }}
  container_definitions = var.values.container_definitions
  {{- end }}
  {{- if $.Values.cpu }}
  cpu = var.values.cpu
  {{- end }}
  {{- if $.Values.ephemeral_storage }}
  ephemeral_storage = var.values.ephemeral_storage
  {{- end }}
  {{- if $.Values.execution_role_arn }}
  execution_role_arn = var.values.execution_role_arn
  {{- end }}
  {{- if $.Values.family }}
  family = var.values.family
  {{- end }}
  {{- if $.Values.inference_accelerator }}
  dynamic "inference_accelerator" {
    for_each = var.values.inference_accelerator[*]
    content {
      device_name = inference_accelerator.value.device_name
      device_type = inference_accelerator.value.device_type
    }
  }
  {{- end }}
  {{- if $.Values.ipc_mode }}
  ipc_mode = var.values.ipc_mode
  {{- end }}
  {{- if $.Values.memory }}
  memory = var.values.memory
  {{- end }}
  {{- if $.Values.network_mode }}
  network_mode = var.values.network_mode
  {{- end }}
  {{- if $.Values.pid_mode }}
  pid_mode = var.values.pid_mode
  {{- end }}
  {{- if $.Values.placement_constraints }}
  dynamic "placement_constraints" {
    for_each = var.values.placement_constraints[*]
    content {
      type = placement_constraints.value.type
      expression = placement_constraints.value.expression
    }
  }
  {{- end }}
  {{- if $.Values.proxy_configuration }}
  proxy_configuration = var.values.proxy_configuration
  {{- end }}
  {{- if $.Values.requires_compatibilities }}
  requires_compatibilities = var.values.requires_compatibilities
  {{- end }}
  {{- if $.Values.runtime_platform }}
  runtime_platform = var.values.runtime_platform
  {{- end }}
  {{- if $.Values.skip_destroy }}
  skip_destroy = var.values.skip_destroy
  {{- end }}
  {{- if $.Values.tags }}
  tags = var.values.tags
  {{- end }}
  {{- if $.Values.task_role_arn }}
  task_role_arn = var.values.task_role_arn
  {{- end }}
  {{- if $.Values.volume }}
  dynamic "volume" {
    for_each = var.values.volume[*]
    content {
      docker_volume_configuration = volume.value.docker_volume_configuration
      efs_volume_configuration = volume.value.efs_volume_configuration
      fsx_windows_file_server_volume_configuration = volume.value.fsx_windows_file_server_volume_configuration
      host_path = volume.value.host_path
      name = volume.value.name
    }
  }
  {{- end }}


  {{- if $.Values.count }}
  count = {{ $.Values.count }}
  {{- end }}

  {{- if $.Values.lifecycle }}
  lifecycle {
    {{- if $.Values.lifecycle.create_before_destroy }}
    create_before_destroy = {{ $.Values.lifecycle.create_before_destroy }}
    {{- end }}
    {{- if $.Values.lifecycle.ignore_changes }}
    prevent_destroy = {{ $.Values.lifecycle.prevent_destroy }}
    {{- end }}
    {{- if $.Values.lifecycle.ignore_changes }}
    ignore_changes = {{ $.Values.lifecycle.ignore_changes }}
    {{- end }}
  }
  {{- end }}
}


output "arn" {
    value = aws_ecs_task_definition.this.arn
}

output "execution_role_arn" {
    value = aws_ecs_task_definition.this.execution_role_arn
}

output "network_mode" {
    value = aws_ecs_task_definition.this.network_mode
}

output "revision" {
    value = aws_ecs_task_definition.this.revision
}

output "task_role_arn" {
    value = aws_ecs_task_definition.this.task_role_arn
}

