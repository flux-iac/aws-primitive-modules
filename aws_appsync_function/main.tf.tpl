######################################################################
# Generated by Tofu-Jet. Please do not manually edit.
# AWS Primitive Module for TF-controller
# Resource: aws_appsync_function
######################################################################

terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "4.38.0"
    }
  }
}

variable "values" {
  type = object({
    api_id = optional(string)
    data_source = optional(string)
    description = optional(string)
    function_version = optional(string)
    max_batch_size = optional(number)
    name = optional(string)
    request_mapping_template = optional(string)
    response_mapping_template = optional(string)
    sync_config = optional(list(object({
        conflict_handler = optional(string)
        lambda_conflict_handler_config = optional(list(object({
            lambda_conflict_handler_arn = optional(string)
        })))
        conflict_detection = optional(string)
    })))
  })
}

resource "aws_appsync_function" "this" {

  {{- if $.Values.api_id }}
  api_id = var.values.api_id
  {{- end }}
  {{- if $.Values.data_source }}
  data_source = var.values.data_source
  {{- end }}
  {{- if $.Values.description }}
  description = var.values.description
  {{- end }}
  {{- if $.Values.function_version }}
  function_version = var.values.function_version
  {{- end }}
  {{- if $.Values.max_batch_size }}
  max_batch_size = var.values.max_batch_size
  {{- end }}
  {{- if $.Values.name }}
  name = var.values.name
  {{- end }}
  {{- if $.Values.request_mapping_template }}
  request_mapping_template = var.values.request_mapping_template
  {{- end }}
  {{- if $.Values.response_mapping_template }}
  response_mapping_template = var.values.response_mapping_template
  {{- end }}
  {{- if $.Values.sync_config }}
  dynamic "sync_config" {
    for_each = var.values.sync_config[*]
    content {
      conflict_detection = sync_config.value.conflict_detection
      conflict_handler = sync_config.value.conflict_handler
      dynamic "lambda_conflict_handler_config" {
        for_each = sync_config.value.lambda_conflict_handler_config[*]
        content {
          lambda_conflict_handler_arn = lambda_conflict_handler_config.value.lambda_conflict_handler_arn
        }
      }
    }
  }
  {{- end }}


  {{- if $.Values.count }}
  count = {{ $.Values.count }}
  {{- end }}

  {{- if $.Values.lifecycle }}
  lifecycle {
    {{- if $.Values.lifecycle.create_before_destroy }}
    create_before_destroy = {{ $.Values.lifecycle.create_before_destroy }}
    {{- end }}
    {{- if $.Values.lifecycle.ignore_changes }}
    prevent_destroy = {{ $.Values.lifecycle.prevent_destroy }}
    {{- end }}
    {{- if $.Values.lifecycle.ignore_changes }}
    ignore_changes = {{ $.Values.lifecycle.ignore_changes }}
    {{- end }}
  }
  {{- end }}
}


output "arn" {
    value = aws_appsync_function.this.arn
}

output "function_id" {
    value = aws_appsync_function.this.function_id
}

