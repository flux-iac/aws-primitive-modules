######################################################################
# Generated by Tofu-Jet. Please do not manually edit.
# AWS Primitive Module for TF-controller
# Resource: aws_ecs_service
######################################################################

terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "4.38.0"
    }
  }
}

provider "aws" {
}

variable "values" {
  type = any object({
    capacity_provider_strategy = optional(set(any))
    cluster = optional(string)
    deployment_circuit_breaker = optional(list({
        enable = optional(bool)
        rollback = optional(bool)
    }))
    deployment_controller = optional(list({
        type = optional(string)
    }))
    deployment_maximum_percent = optional(number)
    deployment_minimum_healthy_percent = optional(number)
    desired_count = optional(number)
    enable_ecs_managed_tags = optional(bool)
    enable_execute_command = optional(bool)
    force_new_deployment = optional(bool)
    health_check_grace_period_seconds = optional(number)
    iam_role = optional(string)
    launch_type = optional(string)
    load_balancer = optional(set(any))
    name = optional(string)
    network_configuration = optional(list({
        security_groups = optional(set(string))
        subnets = optional(set(string))
        assign_public_ip = optional(bool)
    }))
    ordered_placement_strategy = optional(list({
        field = optional(string)
        type = optional(string)
    }))
    placement_constraints = optional(set(any))
    propagate_tags = optional(string)
    scheduling_strategy = optional(string)
    service_registries = optional(list({
        container_name = optional(string)
        container_port = optional(number)
        port = optional(number)
        registry_arn = optional(string)
    }))
    tags = optional(map(string))
    task_definition = optional(string)
    wait_for_steady_state = optional(bool)
  })
}

resource "aws_ecs_service" "this" {

  {{- if $.Values.capacity_provider_strategy }}
  capacity_provider_strategy = var.values.capacity_provider_strategy
  {{- end }}
  {{- if $.Values.cluster }}
  cluster = var.values.cluster
  {{- end }}
  {{- if $.Values.deployment_circuit_breaker }}
  deployment_circuit_breaker = var.values.deployment_circuit_breaker
  {{- end }}
  {{- if $.Values.deployment_controller }}
  deployment_controller = var.values.deployment_controller
  {{- end }}
  {{- if $.Values.deployment_maximum_percent }}
  deployment_maximum_percent = var.values.deployment_maximum_percent
  {{- end }}
  {{- if $.Values.deployment_minimum_healthy_percent }}
  deployment_minimum_healthy_percent = var.values.deployment_minimum_healthy_percent
  {{- end }}
  {{- if $.Values.desired_count }}
  desired_count = var.values.desired_count
  {{- end }}
  {{- if $.Values.enable_ecs_managed_tags }}
  enable_ecs_managed_tags = var.values.enable_ecs_managed_tags
  {{- end }}
  {{- if $.Values.enable_execute_command }}
  enable_execute_command = var.values.enable_execute_command
  {{- end }}
  {{- if $.Values.force_new_deployment }}
  force_new_deployment = var.values.force_new_deployment
  {{- end }}
  {{- if $.Values.health_check_grace_period_seconds }}
  health_check_grace_period_seconds = var.values.health_check_grace_period_seconds
  {{- end }}
  {{- if $.Values.iam_role }}
  iam_role = var.values.iam_role
  {{- end }}
  {{- if $.Values.launch_type }}
  launch_type = var.values.launch_type
  {{- end }}
  {{- if $.Values.load_balancer }}
  load_balancer = var.values.load_balancer
  {{- end }}
  {{- if $.Values.name }}
  name = var.values.name
  {{- end }}
  {{- if $.Values.network_configuration }}
  network_configuration = var.values.network_configuration
  {{- end }}
  {{- if $.Values.ordered_placement_strategy }}
  ordered_placement_strategy = var.values.ordered_placement_strategy
  {{- end }}
  {{- if $.Values.placement_constraints }}
  placement_constraints = var.values.placement_constraints
  {{- end }}
  {{- if $.Values.propagate_tags }}
  propagate_tags = var.values.propagate_tags
  {{- end }}
  {{- if $.Values.scheduling_strategy }}
  scheduling_strategy = var.values.scheduling_strategy
  {{- end }}
  {{- if $.Values.service_registries }}
  service_registries = var.values.service_registries
  {{- end }}
  {{- if $.Values.tags }}
  tags = var.values.tags
  {{- end }}
  {{- if $.Values.task_definition }}
  task_definition = var.values.task_definition
  {{- end }}
  {{- if $.Values.wait_for_steady_state }}
  wait_for_steady_state = var.values.wait_for_steady_state
  {{- end }}


  {{- if $.Values.count }}
  count = {{ $.Values.count }}
  {{- end }}

  {{- if $.Values.lifecycle }}
  lifecycle {
    {{- if $.Values.lifecycle.create_before_destroy }}
    create_before_destroy = {{ $.Values.lifecycle.create_before_destroy }}
    {{- end }}
    {{- if $.Values.lifecycle.ignore_changes }}
    prevent_destroy = {{ $.Values.lifecycle.prevent_destroy }}
    {{- end }}
    {{- if $.Values.lifecycle.ignore_changes }}
    ignore_changes = {{ $.Values.lifecycle.ignore_changes }}
    {{- end }}
  }
  {{- end }}
}


output "cluster" {
    value = aws_ecs_service.this.cluster
}

output "iam_role" {
    value = aws_ecs_service.this.iam_role
}

output "launch_type" {
    value = aws_ecs_service.this.launch_type
}

output "platform_version" {
    value = aws_ecs_service.this.platform_version
}

