######################################################################
# Generated by Tofu-Jet. Please do not manually edit.
# AWS Primitive Module for TF-controller
# Resource: aws_apprunner_service
######################################################################

terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "4.38.0"
    }
  }
}

provider "aws" {
}

variable "values" {
  type = object({
    encryption_configuration = optional(list(object({
        kms_key = optional(string)
    })))
    health_check_configuration = optional(list(object({
        timeout = optional(number)
        unhealthy_threshold = optional(number)
        healthy_threshold = optional(number)
        interval = optional(number)
        path = optional(string)
        protocol = optional(string)
    })))
    observability_configuration = optional(list(object({
        observability_configuration_arn = optional(string)
        observability_enabled = optional(bool)
    })))
    service_name = optional(string)
    source_configuration = optional(list(object({
        authentication_configuration = optional(list(object({
            access_role_arn = optional(string)
            connection_arn = optional(string)
        })))
        auto_deployments_enabled = optional(bool)
        code_repository = optional(list(object({
            code_configuration = optional(list(object({
                code_configuration_values = optional(list(object({
                    build_command = optional(string)
                    port = optional(string)
                    runtime = optional(string)
                    runtime_environment_variables = optional(map(string))
                    start_command = optional(string)
                })))
                configuration_source = optional(string)
            })))
            repository_url = optional(string)
            source_code_version = optional(list(object({
                type = optional(string)
                value = optional(string)
            })))
        })))
        image_repository = optional(list(object({
            image_configuration = optional(list(object({
                port = optional(string)
                runtime_environment_variables = optional(map(string))
                start_command = optional(string)
            })))
            image_identifier = optional(string)
            image_repository_type = optional(string)
        })))
    })))
    tags = optional(map(string))
  })
}

resource "aws_apprunner_service" "this" {

  {{- if $.Values.encryption_configuration }}
  encryption_configuration = var.values.encryption_configuration
  {{- end }}
  {{- if $.Values.health_check_configuration }}
  health_check_configuration = var.values.health_check_configuration
  {{- end }}
  {{- if $.Values.observability_configuration }}
  observability_configuration = var.values.observability_configuration
  {{- end }}
  {{- if $.Values.service_name }}
  service_name = var.values.service_name
  {{- end }}
  {{- if $.Values.source_configuration }}
  source_configuration = var.values.source_configuration
  {{- end }}
  {{- if $.Values.tags }}
  tags = var.values.tags
  {{- end }}


  {{- if $.Values.count }}
  count = {{ $.Values.count }}
  {{- end }}

  {{- if $.Values.lifecycle }}
  lifecycle {
    {{- if $.Values.lifecycle.create_before_destroy }}
    create_before_destroy = {{ $.Values.lifecycle.create_before_destroy }}
    {{- end }}
    {{- if $.Values.lifecycle.ignore_changes }}
    prevent_destroy = {{ $.Values.lifecycle.prevent_destroy }}
    {{- end }}
    {{- if $.Values.lifecycle.ignore_changes }}
    ignore_changes = {{ $.Values.lifecycle.ignore_changes }}
    {{- end }}
  }
  {{- end }}
}


output "arn" {
    value = aws_apprunner_service.this.arn
}

output "auto_scaling_configuration_arn" {
    value = aws_apprunner_service.this.auto_scaling_configuration_arn
}

output "service_id" {
    value = aws_apprunner_service.this.service_id
}

output "service_url" {
    value = aws_apprunner_service.this.service_url
}

output "status" {
    value = aws_apprunner_service.this.status
}

