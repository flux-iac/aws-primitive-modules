######################################################################
# Generated by Tofu-Jet. Please do not manually edit.
# AWS Primitive Module for TF-controller
# Resource: aws_apprunner_service
######################################################################

terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "4.38.0"
    }
  }
}

variable "values" {
  type = object({
    encryption_configuration = optional(list(object({
        kms_key = optional(string)
    })))
    health_check_configuration = optional(list(object({
        unhealthy_threshold = optional(number)
        healthy_threshold = optional(number)
        interval = optional(number)
        path = optional(string)
        protocol = optional(string)
        timeout = optional(number)
    })))
    observability_configuration = optional(list(object({
        observability_configuration_arn = optional(string)
        observability_enabled = optional(bool)
    })))
    service_name = optional(string)
    source_configuration = optional(list(object({
        authentication_configuration = optional(list(object({
            access_role_arn = optional(string)
            connection_arn = optional(string)
        })))
        auto_deployments_enabled = optional(bool)
        code_repository = optional(list(object({
            repository_url = optional(string)
            source_code_version = optional(list(object({
                type = optional(string)
                value = optional(string)
            })))
            code_configuration = optional(list(object({
                code_configuration_values = optional(list(object({
                    start_command = optional(string)
                    build_command = optional(string)
                    port = optional(string)
                    runtime = optional(string)
                    runtime_environment_variables = optional(map(string))
                })))
                configuration_source = optional(string)
            })))
        })))
        image_repository = optional(list(object({
            image_configuration = optional(list(object({
                runtime_environment_variables = optional(map(string))
                start_command = optional(string)
                port = optional(string)
            })))
            image_identifier = optional(string)
            image_repository_type = optional(string)
        })))
    })))
    tags = optional(map(string))
  })
}

resource "aws_apprunner_service" "this" {

  {{- if $.Values.encryption_configuration }}
  dynamic "encryption_configuration" {
    for_each = var.values.encryption_configuration[*]
    content {
      kms_key = encryption_configuration.value.kms_key
    }
  }
  {{- end }}
  {{- if $.Values.health_check_configuration }}
  dynamic "health_check_configuration" {
    for_each = var.values.health_check_configuration[*]
    content {
      unhealthy_threshold = health_check_configuration.value.unhealthy_threshold
      healthy_threshold = health_check_configuration.value.healthy_threshold
      interval = health_check_configuration.value.interval
      path = health_check_configuration.value.path
      protocol = health_check_configuration.value.protocol
      timeout = health_check_configuration.value.timeout
    }
  }
  {{- end }}
  {{- if $.Values.observability_configuration }}
  dynamic "observability_configuration" {
    for_each = var.values.observability_configuration[*]
    content {
      observability_configuration_arn = observability_configuration.value.observability_configuration_arn
      observability_enabled = observability_configuration.value.observability_enabled
    }
  }
  {{- end }}
  {{- if $.Values.service_name }}
  service_name = var.values.service_name
  {{- end }}
  {{- if $.Values.source_configuration }}
  dynamic "source_configuration" {
    for_each = var.values.source_configuration[*]
    content {
      dynamic "authentication_configuration" {
        for_each = source_configuration.value.authentication_configuration[*]
        content {
          access_role_arn = authentication_configuration.value.access_role_arn
          connection_arn = authentication_configuration.value.connection_arn
        }
      }
      auto_deployments_enabled = source_configuration.value.auto_deployments_enabled
      dynamic "code_repository" {
        for_each = source_configuration.value.code_repository[*]
        content {
          dynamic "code_configuration" {
            for_each = code_repository.value.code_configuration[*]
            content {
              dynamic "code_configuration_values" {
                for_each = code_configuration.value.code_configuration_values[*]
                content {
                  build_command = code_configuration_values.value.build_command
                  port = code_configuration_values.value.port
                  runtime = code_configuration_values.value.runtime
                  runtime_environment_variables = code_configuration_values.value.runtime_environment_variables
                  start_command = code_configuration_values.value.start_command
                }
              }
              configuration_source = code_configuration.value.configuration_source
            }
          }
          repository_url = code_repository.value.repository_url
          dynamic "source_code_version" {
            for_each = code_repository.value.source_code_version[*]
            content {
              type = source_code_version.value.type
              value = source_code_version.value.value
            }
          }
        }
      }
      dynamic "image_repository" {
        for_each = source_configuration.value.image_repository[*]
        content {
          dynamic "image_configuration" {
            for_each = image_repository.value.image_configuration[*]
            content {
              port = image_configuration.value.port
              runtime_environment_variables = image_configuration.value.runtime_environment_variables
              start_command = image_configuration.value.start_command
            }
          }
          image_identifier = image_repository.value.image_identifier
          image_repository_type = image_repository.value.image_repository_type
        }
      }
    }
  }
  {{- end }}
  {{- if $.Values.tags }}
  tags = var.values.tags
  {{- end }}


  {{- if $.Values.count }}
  count = {{ $.Values.count }}
  {{- end }}

  {{- if $.Values.lifecycle }}
  lifecycle {
    {{- if $.Values.lifecycle.create_before_destroy }}
    create_before_destroy = {{ $.Values.lifecycle.create_before_destroy }}
    {{- end }}
    {{- if $.Values.lifecycle.ignore_changes }}
    prevent_destroy = {{ $.Values.lifecycle.prevent_destroy }}
    {{- end }}
    {{- if $.Values.lifecycle.ignore_changes }}
    ignore_changes = {{ $.Values.lifecycle.ignore_changes }}
    {{- end }}
  }
  {{- end }}
}


output "arn" {
    value = aws_apprunner_service.this.arn
}

output "auto_scaling_configuration_arn" {
    value = aws_apprunner_service.this.auto_scaling_configuration_arn
}

output "service_id" {
    value = aws_apprunner_service.this.service_id
}

output "service_url" {
    value = aws_apprunner_service.this.service_url
}

output "status" {
    value = aws_apprunner_service.this.status
}

